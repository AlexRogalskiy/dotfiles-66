#!/bin/bash

#
# [ TMUX ]
#
function tn() {
    tmux new -s "$1"
}
function tls() {
    tmux ls
}
function tk-all() {
    tmux ls | grep : | cut -d. -f1 | awk '{print substr($1, 0, length($1)-1)}' | xargs kill
}
function tk() {
    tmux kill-session -t "$1"
}
function td() {
    tmux detach
}
function ta() {
    tmux a -t "$1"
}

#
# [ TORRENTS ]
# 
function tsm() {
    transmission-remote -l
}
function tsm-daemon() {
    transmission-daemon
}
function tsm-add() {
    transmission-remote --add "$1"
}
function tsm-clearcompleted() {
        transmission-remote -l | grep 100% | grep Done | \
        awk '{print $4}' | xargs -n 1 -I % transmission-remote -t % -r
}
function tsm-quit() {
    killall transmission-daemon
}
function tsm-purge() {
    transmission-remote -t"$1" --remove-and-delete
}

#
# [ FZF ] 
# 
function fzfp() {
    fzf --preview 'head -100 {}'
}
function fzfv() {
    nvim $(fzf)
}
function fd() {
    local dir dir=$(find ${1:-.} -path '*/\.*' -prune -o -type d -print 2> /dev/null | fzf +m) && cd "$dir"
}

#
# [ WEB ]
# 
# web_search from terminal

function web_search() {
  emulate -L zsh

  # define search engine URLS
  typeset -A urls
  urls=(
    $ZSH_WEB_SEARCH_ENGINES
    google      "https://www.google.com/search?q="
    bing        "https://www.bing.com/search?q="
    yahoo       "https://search.yahoo.com/search?p="
    duckduckgo  "https://www.duckduckgo.com/?q="
    startpage   "https://www.startpage.com/do/search?q="
    yandex      "https://yandex.ru/yandsearch?text="
    github      "https://github.com/search?q="
    baidu       "https://www.baidu.com/s?wd="
    ecosia      "https://www.ecosia.org/search?q="
    goodreads   "https://www.goodreads.com/search?q="
    qwant       "https://www.qwant.com/?q="
    givero      "https://www.givero.com/search?q="
   stackoverflow  "https://stackoverflow.com/search?q="
    wolframalpha   "https://www.wolframalpha.com/input/?i="
    archive     "https://web.archive.org/web/*/"
    scholar        "https://scholar.google.com/scholar?q="
  )

  # check whether the search engine is supported
  if [[ -z "$urls[$1]" ]]; then
    echo "Search engine '$1' not supported."
    return 1
  fi

  # search or go to main page depending on number of arguments passed
  if [[ $# -gt 1 ]]; then
    # build search url:
    # join arguments passed with '+', then append to search engine URL
    url="${urls[$1]}${(j:+:)@[2,-1]}"
  else
    # build main page url:
    # split by '/', then rejoin protocol (1) and domain (2) parts with '//'
    url="${(j://:)${(s:/:)urls[$1]}[1,2]}"
  fi

  open_command "$url"
}


# other search engine aliases
if [[ ${#ZSH_WEB_SEARCH_ENGINES} -gt 0 ]]; then
  typeset -A engines
  engines=($ZSH_WEB_SEARCH_ENGINES)
  for key in ${(k)engines}; do
    alias "$key"="web_search $key"
  done
  unset engines key
fi 

